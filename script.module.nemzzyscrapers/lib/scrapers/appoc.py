import requestsimport reimport xbmcimport xbmcguiimport timefrom random import randintdialog = xbmcgui.Dialog()ua = ('kodi')class Scraper:	def __init__(self):		self.Base = 'http://noledynasty.xyz/cinema/cinemamain.xml'		self.Search = ('/%s-watch-online/')		self.links = []	def Index(self,type, term,year,imdb,torrents):		if type == 'TV': pass		else:			try:				link = requests.get(self.Base, headers={"User-Agent":ua}).content				matches = re.findall('<item>(.*?)</item>',link,flags=re.DOTALL)				for content in matches:					if '<folder>' in content:						checkurl = re.findall('<folder>(.*?)</folder>',content,flags=re.DOTALL)						for links in checkurl:							searchcontent = requests.get(links,headers={"User-Agent":ua}).content							lists = re.findall('<item>(.*?)</item>',searchcontent,flags=re.DOTALL)							for expand in lists:								if term.lower() in expand.lower():									titles = re.findall('<title>(.*?)</title>',expand,flags=re.DOTALL)[0]									link = re.findall('<link>(.*?)</link>',expand,flags=re.DOTALL)									if link > 1 :										for links in link:											title = 'NemesisAio ( Debrid )| FHD | ' + titles											quality = '6'											self.links.append({'title': title, 'url': links , 'quality' : quality, 'Debrid' : True, 'Direct' : False})									else:										title = 'NemesisAio ( Debrid ) | FHD | ' + titles										quality = '6'										self.links.append({'title': title, 'url': link , 'quality' : quality, 'Debrid' : True, 'Direct' : False})				return self.links			except Exception as c:				xbmc.log("ERROR ::: %s" %c , level=xbmc.LOGNOTICE)